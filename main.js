/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DragBoardPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DragBoardPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("\u2705 Drag\u202FBoard plugin loaded");
    this.registerMarkdownCodeBlockProcessor(
      "drag-board",
      async (source, el, ctx) => {
        requestAnimationFrame(() => {
          setTimeout(() => {
            const file = this.app.vault.getAbstractFileByPath(ctx.sourcePath);
            if (!(file instanceof import_obsidian.TFile))
              return;
            const child = new DragBoardRender(el, this, file, "highlights");
            ctx.addChild(child);
          }, 1);
        });
      }
    );
  }
  onunload() {
    console.log("\u{1F6AB} Drag\u202FBoard plugin unloaded");
  }
};
var DragBoardRender = class extends import_obsidian.MarkdownRenderChild {
  constructor(el, plugin, file, mode) {
    super(el);
    this.plugin = plugin;
    this.file = file;
    this.mode = mode;
  }
  async onload() {
    console.log("DragBoardRender loaded mode:", this.mode);
    await this.render();
    this.containerEl._dragBoardChild = this;
    this.registerEvent(
      this.plugin.app.vault.on("modify", async (f) => {
        if (f.path === this.file.path) {
          await this.render();
        }
      })
    );
  }
  async render() {
    while (this.containerEl.firstChild) {
      this.containerEl.firstChild.remove();
    }
    const markdown = await this.plugin.app.vault.read(this.file);
    if (this.mode === "highlights") {
      createHighlightBoard(this.containerEl, markdown, this.file.path);
    } else if (this.mode === "tasks") {
      await createTaskBoard(this.containerEl, markdown, this.file.path, this.plugin, this.file);
    }
    this.containerEl.querySelectorAll(".drag-board-container").forEach((bc) => bc._dragBoardChild = this);
  }
  setMode(newMode) {
    if (this.mode !== newMode) {
      this.mode = newMode;
      this.render();
    }
  }
};
var pastelColors = [
  "#ffe5ec",
  "#e0f7fa",
  "#fff4e6",
  "#e6f2ff",
  "#eafce0",
  "#f6e6ff"
];
function createHighlightBoard(container, markdown, filePath, plugin, file) {
  if (!document.head.querySelector("style[data-drag-board]")) {
    const style = document.createElement("style");
    style.dataset.dragBoard = "true";
    style.textContent = `
.drag-board-container {
	position:relative;
	height:320px;
	width:100%;
	overflow:hidden;
	border-radius:0 0 12px 12px;
	background-image:
		radial-gradient(#ddd 1px,transparent 0),
		radial-gradient(#ddd 1px,transparent 0);
	background-position:0 0,10px 10px;
	background-size:20px 20px;
	touch-action: none;
	box-shadow: 0 2px 8px rgba(0,0,0,0.08);
}
.drag-board-card{
	position:absolute;
	min-width:80px;
	max-width:200px;
	padding:6px 10px;
	font-size:0.95rem;
	border:1px solid #ccc;
	border-radius:10px;
	box-shadow:2px 2px 6px rgba(0,0,0,0.1);
	cursor:grab;
	user-select:none;
	transition:transform 0.1s;
	touch-action: none;
	color: #000;
}
.drag-board-card.dragging{transform:scale(1.05);}
/* Dark theme */
.drag-board-dark.drag-board-container {
	background-image:
		radial-gradient(#222 1px,transparent 0),
		radial-gradient(#222 1px,transparent 0);
	background-color: #181a1b;
	box-shadow: 0 2px 12px rgba(0,0,0,0.25);
}
.drag-board-dark .drag-board-card {
	/* background: #23272a !important; */ /* Removed to allow user-defined colors */
	/* Only override color if background is explicitly dark, otherwise inherit */
	color: #000;
	border: 1px solid #444;
	box-shadow: 2px 2px 8px rgba(0,0,0,0.25);
}
.drag-board-card.selected {
	border: 2px solid #5b9aff !important;
	box-shadow: 0 0 0 2px #c3e0ff;
}
.drag-board-dark .drag-board-card.selected {
	border: 2px solid #8ab4f8 !important;
	box-shadow: 0 0 0 2px #314b6e;
}
`;
    document.head.appendChild(style);
  }
  const topBar = createBoardTopBar({
    onSizeChange: (height, width, mode) => {
      if (mode === "fill") {
        board.style.height = window.innerHeight + "px";
        board.style.width = "100%";
      } else if (mode === "default") {
        board.style.height = "320px";
        board.style.width = "100%";
      } else if (mode === "custom" && height && width) {
        board.style.height = height + "px";
        board.style.width = width + "px";
      }
    },
    // Always show color, scale, focus unless explicitly set false
    enableColor: true,
    enableScale: true,
    enableFocus: true
  }, plugin, file, "highlights");
  const board = container.createDiv({ cls: "drag-board-container" });
  board.style.borderRadius = "0 0 12px 12px";
  board.style.marginTop = "0";
  board.prepend(topBar);
  const highlights = [];
  const hiddenLabels = JSON.parse(localStorage.getItem("drag-board:hidden") || "[]");
  let insideCode = false;
  for (const line of markdown.split("\n")) {
    if (line.trim().startsWith("```")) {
      insideCode = !insideCode;
      continue;
    }
    if (insideCode)
      continue;
    for (const m of line.matchAll(/==(.+?)==/g)) {
      highlights.push({ label: m[1] });
    }
  }
  const storageKey = `highlight-board:${filePath}`;
  const stored = JSON.parse(
    localStorage.getItem(storageKey) || "{}"
  );
  for (const h of highlights) {
    if (!stored[h.label]) {
      stored[h.label] = {
        label: h.label,
        x: Math.floor(Math.random() * 240),
        y: Math.floor(Math.random() * 120),
        color: pastelColors[Math.floor(Math.random() * pastelColors.length)]
      };
    }
  }
  for (const label of hiddenLabels) {
    if (!stored[label]) {
      stored[label] = {
        label,
        x: Math.floor(Math.random() * 240),
        y: Math.floor(Math.random() * 120),
        color: pastelColors[Math.floor(Math.random() * pastelColors.length)]
      };
    }
  }
  localStorage.setItem(storageKey, JSON.stringify(stored));
  let selectedCard = null;
  let selectedLabel = null;
  for (const { label } of highlights) {
    const info = stored[label];
    const card = board.createDiv({ cls: "drag-board-card" });
    card.textContent = label;
    if (hiddenLabels.includes(label)) {
      card.style.display = "none";
    }
    card.style.left = `${info.x}px`;
    card.style.top = `${info.y}px`;
    card.style.background = info.color;
    let startX = 0, startY = 0, origX = 0, origY = 0;
    card.addEventListener("pointerdown", (e) => {
      startX = e.clientX;
      startY = e.clientY;
      origX = parseInt(card.style.left);
      origY = parseInt(card.style.top);
      card.setPointerCapture(e.pointerId);
      card.classList.add("dragging");
    });
    card.addEventListener("pointermove", (e) => {
      if (!card.hasPointerCapture(e.pointerId))
        return;
      const dx = e.clientX - startX;
      const dy = e.clientY - startY;
      card.style.left = `${origX + dx}px`;
      card.style.top = `${origY + dy}px`;
    });
    card.addEventListener("pointerup", (e) => {
      card.releasePointerCapture(e.pointerId);
      card.classList.remove("dragging");
      info.x = parseInt(card.style.left);
      info.y = parseInt(card.style.top);
      localStorage.setItem(storageKey, JSON.stringify(stored));
    });
    card.addEventListener("click", () => {
      if (selectedCard)
        selectedCard.classList.remove("selected");
      if (selectedCard === card) {
        selectedCard = null;
        selectedLabel = null;
      } else {
        selectedCard = card;
        selectedLabel = label;
        card.classList.add("selected");
      }
    });
  }
}
async function createTaskBoard(container, markdown, filePath, plugin, file) {
  const board = container.createDiv({ cls: "drag-board-container" });
  board.style.borderRadius = "0 0 12px 12px";
  board.style.marginTop = "0";
  const topBar = createBoardTopBar({
    onSizeChange: (height, width, mode) => {
      if (mode === "fill") {
        board.style.height = window.innerHeight + "px";
        board.style.width = "100%";
      } else if (mode === "default") {
        board.style.height = "320px";
        board.style.width = "100%";
      } else if (mode === "custom" && height && width) {
        board.style.height = height + "px";
        board.style.width = width + "px";
      }
    },
    enableColor: true,
    enableScale: true,
    enableFocus: true,
    getSelected: () => ({
      selectedCard,
      selectedCardLabel,
      selectedCardLine
    }),
    setCardColor: (label, color) => {
      if (label && cardColors[label] && cardToInfo) {
        cardColors[label] = color;
      }
    },
    onColorChange: (color) => {
      if (selectedCard && selectedCardLabel) {
        selectedCard.style.background = color;
        cardColors[selectedCardLabel] = color;
        localStorage.setItem(storageKey + ":colors", JSON.stringify(cardColors));
      }
    },
    onScaleChange: (delta) => {
      if (!selectedCard || !selectedCardLabel)
        return;
      const prev = cardScales[selectedCardLabel] || 1;
      let next = Math.max(0.3, Math.min(2.5, prev + delta));
      cardScales[selectedCardLabel] = next;
      selectedCard.style.transform = `scale(${next})`;
      localStorage.setItem(storageKey + ":scales", JSON.stringify(cardScales));
    },
    onFocus: async () => {
      if (!selectedCard || selectedCardLabel == null || selectedCardLine == null)
        return;
      const leaf = await plugin.app.workspace.openLinkText(file.path, "", false);
      setTimeout(() => {
        var _a;
        const view = (_a = plugin.app.workspace.getLeavesOfType("markdown").find((l) => {
          var _a2;
          return ((_a2 = l.view.file) == null ? void 0 : _a2.path) === file.path;
        })) == null ? void 0 : _a.view;
        if (view && "editor" in view) {
          const editor = view.editor;
          const lineToGo = selectedCardLine;
          editor.scrollIntoView({ from: { line: lineToGo, ch: 0 }, to: { line: lineToGo, ch: 0 } });
          editor.setCursor({ line: lineToGo, ch: 0 });
        }
      }, 100);
    },
    pastelColors
  }, plugin, file, "tasks");
  board.prepend(topBar);
  const tasks = [];
  let insideCode = false;
  const lines = markdown.split("\n");
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    if (line.trim().startsWith("```")) {
      insideCode = !insideCode;
      continue;
    }
    if (insideCode)
      continue;
    const match = line.match(/^\s*-\s\[\s\]\s(.+)/);
    if (match) {
      tasks.push({ label: match[1], lineNumber: i });
    }
  }
  if (tasks.length === 0) {
    board.createEl("p", { text: "No unchecked tasks found in this note." });
  }
  const storageKey = `task-board:${filePath}`;
  const stored = JSON.parse(
    localStorage.getItem(storageKey) || "{}"
  );
  for (const t of tasks) {
    if (!stored[t.label]) {
      stored[t.label] = {
        label: t.label,
        x: Math.floor(Math.random() * 240),
        y: Math.floor(Math.random() * 120),
        color: pastelColors[Math.floor(Math.random() * pastelColors.length)]
      };
    }
  }
  localStorage.setItem(storageKey, JSON.stringify(stored));
  let selectedCard = null;
  let selectedCardLabel = null;
  let selectedCardLine = null;
  let cardToInfo = /* @__PURE__ */ new Map();
  let cardScales = JSON.parse(localStorage.getItem(storageKey + ":scales") || "{}");
  let cardColors = JSON.parse(localStorage.getItem(storageKey + ":colors") || "{}");
  for (const { label, lineNumber } of tasks) {
    const info = stored[label];
    const card = board.createDiv({ cls: "drag-board-card" });
    card.style.left = `${info.x}px`;
    card.style.top = `${info.y}px`;
    card.style.background = cardColors[label] || info.color;
    const scale = cardScales[label] || 1;
    card.style.transform = `scale(${scale})`;
    const checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.checked = markdown.includes(`- [x] ${label}`);
    checkbox.style.marginRight = "6px";
    card.prepend(checkbox);
    const labelSpan = document.createElement("span");
    labelSpan.textContent = label;
    card.appendChild(labelSpan);
    let startX = 0, startY = 0, origX = 0, origY = 0;
    card.addEventListener("pointerdown", (e) => {
      if (e.target === checkbox)
        return;
      startX = e.clientX;
      startY = e.clientY;
      origX = parseInt(card.style.left);
      origY = parseInt(card.style.top);
      card.setPointerCapture(e.pointerId);
      card.classList.add("dragging");
    });
    card.addEventListener("pointermove", (e) => {
      if (!card.hasPointerCapture(e.pointerId))
        return;
      const dx = e.clientX - startX;
      const dy = e.clientY - startY;
      card.style.left = `${origX + dx}px`;
      card.style.top = `${origY + dy}px`;
    });
    card.addEventListener("pointerup", (e) => {
      if (card.hasPointerCapture(e.pointerId)) {
        card.releasePointerCapture(e.pointerId);
        card.classList.remove("dragging");
        info.x = parseInt(card.style.left);
        info.y = parseInt(card.style.top);
        localStorage.setItem(storageKey, JSON.stringify(stored));
      }
    });
    checkbox.addEventListener("change", async () => {
      let content = await plugin.app.vault.read(file);
      const contentLines = content.split("\n");
      let updated = false;
      for (let i = 0; i < contentLines.length; i++) {
        const line = contentLines[i];
        const regexUnchecked = new RegExp(`^\\s*- \\[ \\] ${escapeRegExp(label)}$`);
        const regexChecked = new RegExp(`^\\s*- \\[x\\] ${escapeRegExp(label)}$`);
        if (checkbox.checked && regexUnchecked.test(line)) {
          contentLines[i] = line.replace("- [ ]", "- [x]");
          updated = true;
          break;
        } else if (!checkbox.checked && regexChecked.test(line)) {
          contentLines[i] = line.replace("- [x]", "- [ ]");
          updated = true;
          break;
        }
      }
      if (updated) {
        await plugin.app.vault.modify(file, contentLines.join("\n"));
      }
    });
    card.addEventListener("click", (e) => {
      if (e.target === checkbox)
        return;
      if (selectedCard)
        selectedCard.classList.remove("selected");
      if (selectedCard === card) {
        selectedCard = null;
        selectedCardLabel = null;
        selectedCardLine = null;
      } else {
        selectedCard = card;
        selectedCardLabel = label;
        selectedCardLine = lineNumber;
        card.classList.add("selected");
      }
    });
    cardToInfo.set(card, { label, lineNumber, info });
  }
}
function createBoardTopBar(opts, plugin, file, initialMode = "highlights") {
  const topBar = document.createElement("div");
  topBar.style.display = "flex";
  topBar.style.alignItems = "center";
  topBar.style.gap = "4px";
  topBar.style.border = "none";
  topBar.style.borderRadius = "0";
  topBar.style.padding = "0 6px";
  topBar.style.background = "#fafbfc";
  topBar.style.height = "20px";
  topBar.style.fontFamily = "monospace";
  const themeBtn = document.createElement("button");
  themeBtn.type = "button";
  themeBtn.title = "Toggle dark/light mode";
  themeBtn.style.fontSize = "14px";
  themeBtn.style.padding = "0 6px";
  themeBtn.style.marginRight = "4px";
  let isDark = false;
  themeBtn.textContent = "\u{1F319}";
  topBar.appendChild(themeBtn);
  themeBtn.addEventListener("click", () => {
    const container = topBar.parentElement || topBar.closest(".drag-board-container");
    let boardContainer = container;
    if (!(boardContainer == null ? void 0 : boardContainer.classList.contains("drag-board-container"))) {
      boardContainer = topBar.closest(".drag-board-container");
    }
    if (boardContainer) {
      isDark = !boardContainer.classList.contains("drag-board-dark");
      if (isDark) {
        boardContainer.classList.add("drag-board-dark");
        themeBtn.textContent = "\u2600\uFE0F";
      } else {
        boardContainer.classList.remove("drag-board-dark");
        themeBtn.textContent = "\u{1F319}";
      }
    }
  });
  const modeSelector = document.createElement("select");
  modeSelector.style.fontSize = "8px";
  ["highlights", "tasks"].forEach((m) => {
    const o = document.createElement("option");
    o.value = m;
    o.textContent = m;
    modeSelector.appendChild(o);
  });
  modeSelector.value = initialMode;
  modeSelector.addEventListener("change", () => {
    const container = topBar.closest(".drag-board-container");
    const child = container == null ? void 0 : container._dragBoardChild;
    if (child == null ? void 0 : child.setMode)
      child.setMode(modeSelector.value);
  });
  topBar.appendChild(modeSelector);
  const sizeSelector = document.createElement("select");
  sizeSelector.style.borderRadius = "4px";
  sizeSelector.style.paddingRight = "16px";
  sizeSelector.style.background = `white url('data:image/svg+xml;utf8,<svg fill="gray" height="12" viewBox="0 0 20 20" width="12" xmlns="http://www.w3.org/2000/svg"><path d="M5.516 7.548a.625.625 0 0 1 .884-.064L10 10.892l3.6-3.408a.625.625 0 1 1 .848.92l-4 3.788a.625.625 0 0 1-.848 0l-4-3.788a.625.625 0 0 1-.064-.884z"/></svg>') no-repeat right 4px center/12px 12px`;
  sizeSelector.style.fontSize = "8px";
  const options = [
    { value: "default", text: "default" },
    { value: "fill", text: "fill" },
    { value: "custom", text: "custom" }
  ];
  for (const opt of options) {
    const optionEl = document.createElement("option");
    optionEl.value = opt.value;
    optionEl.textContent = opt.text;
    sizeSelector.appendChild(optionEl);
  }
  topBar.appendChild(sizeSelector);
  const heightInput = document.createElement("input");
  heightInput.type = "number";
  heightInput.placeholder = "Height";
  heightInput.style.width = "60px";
  heightInput.min = "1";
  heightInput.style.fontSize = "8px";
  const widthInput = document.createElement("input");
  widthInput.type = "number";
  widthInput.placeholder = "Width";
  widthInput.style.width = "60px";
  widthInput.min = "1";
  widthInput.style.fontSize = "8px";
  const confirmButton = document.createElement("button");
  confirmButton.type = "button";
  confirmButton.textContent = "Set Size";
  confirmButton.style.fontSize = "8px";
  confirmButton.style.padding = "0 4px";
  heightInput.style.display = "none";
  widthInput.style.display = "none";
  confirmButton.style.display = "none";
  topBar.appendChild(heightInput);
  topBar.appendChild(widthInput);
  topBar.appendChild(confirmButton);
  function updateCustomFields() {
    if (sizeSelector.value === "custom") {
      heightInput.style.display = "";
      widthInput.style.display = "";
      confirmButton.style.display = "";
    } else {
      heightInput.style.display = "none";
      widthInput.style.display = "none";
      confirmButton.style.display = "none";
    }
  }
  sizeSelector.addEventListener("change", () => {
    if (opts.onSizeChange) {
      if (sizeSelector.value === "fill") {
        opts.onSizeChange(0, 0, "fill");
      } else if (sizeSelector.value === "default") {
        opts.onSizeChange(0, 0, "default");
      }
    }
    updateCustomFields();
  });
  updateCustomFields();
  confirmButton.addEventListener("click", (e) => {
    const height = parseInt(heightInput.value);
    const width = parseInt(widthInput.value);
    if (!isNaN(height) && height > 0 && !isNaN(width) && width > 0) {
      if (opts.onSizeChange)
        opts.onSizeChange(height, width, "custom");
    } else {
      alert("Invalid input, please enter positive numbers for height and width.");
    }
  });
  if (opts.enableColor !== false) {
    const colorBtn = document.createElement("button");
    colorBtn.type = "button";
    colorBtn.textContent = "Color \u{1F3A8}";
    colorBtn.style.fontSize = "8px";
    colorBtn.style.padding = "0 4px";
    topBar.appendChild(colorBtn);
    colorBtn.addEventListener("click", (e) => {
      if (!opts.getSelected)
        return;
      const { selectedCard, selectedCardLabel } = opts.getSelected();
      if (!selectedCard || !selectedCardLabel)
        return;
      let popup = document.createElement("div");
      popup.style.position = "absolute";
      popup.style.zIndex = "9999";
      popup.style.background = "#fff";
      popup.style.border = "1px solid #ccc";
      popup.style.borderRadius = "8px";
      popup.style.padding = "8px";
      popup.style.boxShadow = "0 2px 12px rgba(0,0,0,0.15)";
      popup.style.display = "flex";
      popup.style.gap = "8px";
      popup.style.top = topBar.getBoundingClientRect().bottom + window.scrollY + 4 + "px";
      popup.style.left = colorBtn.getBoundingClientRect().left + window.scrollX + "px";
      const colors = opts.pastelColors || pastelColors;
      for (const color of colors) {
        let btn = document.createElement("button");
        btn.style.background = color;
        btn.style.width = "24px";
        btn.style.height = "24px";
        btn.style.border = "1px solid #ccc";
        btn.style.borderRadius = "50%";
        btn.style.cursor = "pointer";
        btn.title = color;
        btn.addEventListener("click", () => {
          if (opts.onColorChange)
            opts.onColorChange(color);
          popup.remove();
        });
        popup.appendChild(btn);
      }
      document.body.appendChild(popup);
      function cleanup(ev) {
        if (!popup.contains(ev.target)) {
          popup.remove();
          window.removeEventListener("mousedown", cleanup);
        }
      }
      setTimeout(() => window.addEventListener("mousedown", cleanup), 10);
    });
  }
  if (opts.enableScale !== false) {
    const scalePlus = document.createElement("button");
    scalePlus.type = "button";
    scalePlus.textContent = "+";
    scalePlus.style.fontSize = "8px";
    scalePlus.style.padding = "0 4px";
    const scaleMinus = document.createElement("button");
    scaleMinus.type = "button";
    scaleMinus.textContent = "-";
    scaleMinus.style.fontSize = "8px";
    scaleMinus.style.padding = "0 4px";
    topBar.appendChild(scalePlus);
    topBar.appendChild(scaleMinus);
    scalePlus.addEventListener("click", () => opts.onScaleChange && opts.onScaleChange(0.1));
    scaleMinus.addEventListener("click", () => opts.onScaleChange && opts.onScaleChange(-0.1));
  }
  if (opts.enableFocus !== false) {
    const focusBtn = document.createElement("button");
    focusBtn.type = "button";
    focusBtn.textContent = "Focus";
    focusBtn.style.fontSize = "8px";
    focusBtn.style.padding = "0 4px";
    topBar.appendChild(focusBtn);
    focusBtn.addEventListener("click", () => opts.onFocus && opts.onFocus());
  }
  const deleteBtn = document.createElement("button");
  deleteBtn.type = "button";
  deleteBtn.textContent = "\u{1F5D1}\uFE0F";
  deleteBtn.style.fontSize = "8px";
  deleteBtn.style.padding = "0 4px";
  topBar.appendChild(deleteBtn);
  deleteBtn.addEventListener("click", async () => {
    if (opts.getSelected) {
      const { selectedCard, selectedCardLabel, selectedCardLine } = opts.getSelected();
      if (selectedCard && selectedCardLabel != null && selectedCardLine != null) {
        selectedCard.remove();
        const file2 = app.workspace.getActiveFile();
        if (file2) {
          const content = await app.vault.read(file2);
          const lines = content.split("\n");
          lines.splice(selectedCardLine, 1);
          await app.vault.modify(file2, lines.join("\n"));
        }
      }
    }
  });
  return topBar;
}
function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBURmlsZSwgTWFya2Rvd25SZW5kZXJDaGlsZCwgTWVudSB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG4vKipcbiAqIERyYWdcdTIwMkZCb2FyZCBcdTIwMTMgZHJhZ2dhYmxlIGNhcmQgYm9hcmRcbiAqXG4gKiBJbnNlcnQgaW4gYSBub3RlOlxuICogYGBgZHJhZy1ib2FyZFxuICogYGBgXG4gKlxuICogTW9kZXM6XG4gKiAgIFx1MjAyMiBoaWdobGlnaHRzIFx1MjAxMyBhIGNhcmQgZm9yIGV2ZXJ5ID09aGlnaGxpZ2h0PT1cbiAqICAgXHUyMDIyIHRhc2tzICAgICAgXHUyMDEzIGEgY2FyZCBmb3IgZXZlcnkgdW5jaGVja2VkIFx1MjAxQy0gWyBdXHUyMDFEIHRhc2tcbiAqXG4gKiBDYXJkIHBvc2l0aW9ucywgY29sb3VycywgYW5kIHNjYWxlcyBhcmUgc2F2ZWQgcGVyXHUyMDExZmlsZSBpbiBsb2NhbFN0b3JhZ2UuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERyYWdCb2FyZFBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHRjb25zb2xlLmxvZyhcIlx1MjcwNSBEcmFnXHUyMDJGQm9hcmQgcGx1Z2luIGxvYWRlZFwiKTtcblxuXHRcdC8qIFx1NkUzMlx1NjdEM1x1ODhBQiBgYGBkcmFnLWJvYXJkIFx1NTMwNVx1NTZGNFx1NzY4NFx1NEVFM1x1NzgwMVx1NTc1NyAqL1xuXHRcdHRoaXMucmVnaXN0ZXJNYXJrZG93bkNvZGVCbG9ja1Byb2Nlc3Nvcihcblx0XHRcdFwiZHJhZy1ib2FyZFwiLFxuXHRcdFx0YXN5bmMgKHNvdXJjZSwgZWwsIGN0eCkgPT4ge1xuXHRcdFx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuXHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0Y29uc3QgZmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChjdHguc291cmNlUGF0aCEpO1xuXHRcdFx0XHRcdFx0aWYgKCEoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSkgcmV0dXJuO1xuXHRcdFx0XHRcdFx0Y29uc3QgY2hpbGQgPSBuZXcgRHJhZ0JvYXJkUmVuZGVyKGVsLCB0aGlzLCBmaWxlLCBcImhpZ2hsaWdodHNcIik7XG5cdFx0XHRcdFx0XHRjdHguYWRkQ2hpbGQoY2hpbGQpO1xuXHRcdFx0XHRcdH0sIDEpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHQpO1xuXHR9XG5cblx0b251bmxvYWQoKSB7XG5cdFx0Y29uc29sZS5sb2coXCJcdUQ4M0RcdURFQUIgRHJhZ1x1MjAyRkJvYXJkIHBsdWdpbiB1bmxvYWRlZFwiKTtcblx0fVxufVxuXG5jbGFzcyBEcmFnQm9hcmRSZW5kZXIgZXh0ZW5kcyBNYXJrZG93blJlbmRlckNoaWxkIHtcblx0cHJpdmF0ZSBwbHVnaW46IFBsdWdpbjtcblx0cHJpdmF0ZSBmaWxlOiBURmlsZTtcblx0cHJpdmF0ZSBtb2RlOiBzdHJpbmc7XG5cblx0Y29uc3RydWN0b3IoZWw6IEhUTUxFbGVtZW50LCBwbHVnaW46IFBsdWdpbiwgZmlsZTogVEZpbGUsIG1vZGU6IHN0cmluZykge1xuXHRcdHN1cGVyKGVsKTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0XHR0aGlzLmZpbGUgPSBmaWxlO1xuXHRcdHRoaXMubW9kZSA9IG1vZGU7XG5cdH1cblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0Y29uc29sZS5sb2coXCJEcmFnQm9hcmRSZW5kZXIgbG9hZGVkIG1vZGU6XCIsIHRoaXMubW9kZSk7XG5cdFx0YXdhaXQgdGhpcy5yZW5kZXIoKTtcblx0XHQodGhpcy5jb250YWluZXJFbCBhcyBhbnkpLl9kcmFnQm9hcmRDaGlsZCA9IHRoaXM7XG5cblx0XHQvLyBcdTVGNTNcdTdCMTRcdThCQjBcdTg4QUJcdTRGRUVcdTY1MzlcdUZGMDhcdTU5ODJcdTRGRERcdTVCNThcdTY1RjZcdUZGMDlcdTUyMzdcdTY1QjBcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXG5cdFx0XHR0aGlzLnBsdWdpbi5hcHAudmF1bHQub24oXCJtb2RpZnlcIiwgYXN5bmMgKGYpID0+IHtcblx0XHRcdFx0aWYgKGYucGF0aCA9PT0gdGhpcy5maWxlLnBhdGgpIHtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnJlbmRlcigpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdCk7XG5cdH1cblxuXHRhc3luYyByZW5kZXIoKSB7XG5cdFx0Ly8gXHU2RTA1XHU3QTdBXHU0RTRCXHU1MjREXHU3Njg0XHU1MTg1XHU1QkI5XG5cdFx0d2hpbGUgKHRoaXMuY29udGFpbmVyRWwuZmlyc3RDaGlsZCkge1xuXHRcdFx0dGhpcy5jb250YWluZXJFbC5maXJzdENoaWxkLnJlbW92ZSgpO1xuXHRcdH1cblx0XHRjb25zdCBtYXJrZG93biA9IGF3YWl0IHRoaXMucGx1Z2luLmFwcC52YXVsdC5yZWFkKHRoaXMuZmlsZSk7XG5cdFx0aWYgKHRoaXMubW9kZSA9PT0gXCJoaWdobGlnaHRzXCIpIHtcblx0XHRcdGNyZWF0ZUhpZ2hsaWdodEJvYXJkKHRoaXMuY29udGFpbmVyRWwsIG1hcmtkb3duLCB0aGlzLmZpbGUucGF0aCk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLm1vZGUgPT09IFwidGFza3NcIikge1xuXHRcdFx0YXdhaXQgY3JlYXRlVGFza0JvYXJkKHRoaXMuY29udGFpbmVyRWwsIG1hcmtkb3duLCB0aGlzLmZpbGUucGF0aCwgdGhpcy5wbHVnaW4sIHRoaXMuZmlsZSk7XG5cdFx0fVxuXHRcdC8vIGV4cG9zZSB0aGlzIGluc3RhbmNlIHNvIHRoZSB0b3BcdTIwMTFiYXIgZHJvcGRvd24gY2FuIGZpbmQgaXQgYWZ0ZXIgZXZlcnkgcmVuZGVyXG5cdFx0dGhpcy5jb250YWluZXJFbFxuXHRcdFx0LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZHJhZy1ib2FyZC1jb250YWluZXJcIilcblx0XHRcdC5mb3JFYWNoKGJjID0+ICgoYmMgYXMgYW55KS5fZHJhZ0JvYXJkQ2hpbGQgPSB0aGlzKSk7XG5cdH1cblxuXHRzZXRNb2RlKG5ld01vZGU6IHN0cmluZykge1xuXHRcdGlmICh0aGlzLm1vZGUgIT09IG5ld01vZGUpIHtcblx0XHRcdHRoaXMubW9kZSA9IG5ld01vZGU7XG5cdFx0XHR0aGlzLnJlbmRlcigpO1xuXHRcdH1cblx0fVxufVxuXG4vKiAtLS0tLS0tLS0tIEJvYXJkIEltcGxlbWVudGF0aW9uIC0tLS0tLS0tLS0gKi9cblxuY29uc3QgcGFzdGVsQ29sb3JzID0gW1xuXHRcIiNmZmU1ZWNcIixcblx0XCIjZTBmN2ZhXCIsXG5cdFwiI2ZmZjRlNlwiLFxuXHRcIiNlNmYyZmZcIixcblx0XCIjZWFmY2UwXCIsXG5cdFwiI2Y2ZTZmZlwiLFxuXTtcblxuaW50ZXJmYWNlIFN0b3JlZENhcmQge1xuXHRsYWJlbDogc3RyaW5nO1xuXHR4OiBudW1iZXI7XG5cdHk6IG51bWJlcjtcblx0Y29sb3I6IHN0cmluZztcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGlnaGxpZ2h0Qm9hcmQoXG5cdGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG5cdG1hcmtkb3duOiBzdHJpbmcsXG5cdGZpbGVQYXRoOiBzdHJpbmcsXG5cdHBsdWdpbj86IFBsdWdpbixcblx0ZmlsZT86IFRGaWxlXG4pIHtcblx0LyogIEluamVjdCBzdHlsZXMgb25jZSAgKi9cblx0aWYgKCFkb2N1bWVudC5oZWFkLnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVtkYXRhLWRyYWctYm9hcmRdXCIpKSB7XG5cdFx0Y29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cdFx0c3R5bGUuZGF0YXNldC5kcmFnQm9hcmQgPSBcInRydWVcIjtcblx0XHRzdHlsZS50ZXh0Q29udGVudCA9IGBcbi5kcmFnLWJvYXJkLWNvbnRhaW5lciB7XG5cdHBvc2l0aW9uOnJlbGF0aXZlO1xuXHRoZWlnaHQ6MzIwcHg7XG5cdHdpZHRoOjEwMCU7XG5cdG92ZXJmbG93OmhpZGRlbjtcblx0Ym9yZGVyLXJhZGl1czowIDAgMTJweCAxMnB4O1xuXHRiYWNrZ3JvdW5kLWltYWdlOlxuXHRcdHJhZGlhbC1ncmFkaWVudCgjZGRkIDFweCx0cmFuc3BhcmVudCAwKSxcblx0XHRyYWRpYWwtZ3JhZGllbnQoI2RkZCAxcHgsdHJhbnNwYXJlbnQgMCk7XG5cdGJhY2tncm91bmQtcG9zaXRpb246MCAwLDEwcHggMTBweDtcblx0YmFja2dyb3VuZC1zaXplOjIwcHggMjBweDtcblx0dG91Y2gtYWN0aW9uOiBub25lO1xuXHRib3gtc2hhZG93OiAwIDJweCA4cHggcmdiYSgwLDAsMCwwLjA4KTtcbn1cbi5kcmFnLWJvYXJkLWNhcmR7XG5cdHBvc2l0aW9uOmFic29sdXRlO1xuXHRtaW4td2lkdGg6ODBweDtcblx0bWF4LXdpZHRoOjIwMHB4O1xuXHRwYWRkaW5nOjZweCAxMHB4O1xuXHRmb250LXNpemU6MC45NXJlbTtcblx0Ym9yZGVyOjFweCBzb2xpZCAjY2NjO1xuXHRib3JkZXItcmFkaXVzOjEwcHg7XG5cdGJveC1zaGFkb3c6MnB4IDJweCA2cHggcmdiYSgwLDAsMCwwLjEpO1xuXHRjdXJzb3I6Z3JhYjtcblx0dXNlci1zZWxlY3Q6bm9uZTtcblx0dHJhbnNpdGlvbjp0cmFuc2Zvcm0gMC4xcztcblx0dG91Y2gtYWN0aW9uOiBub25lO1xuXHRjb2xvcjogIzAwMDtcbn1cbi5kcmFnLWJvYXJkLWNhcmQuZHJhZ2dpbmd7dHJhbnNmb3JtOnNjYWxlKDEuMDUpO31cbi8qIERhcmsgdGhlbWUgKi9cbi5kcmFnLWJvYXJkLWRhcmsuZHJhZy1ib2FyZC1jb250YWluZXIge1xuXHRiYWNrZ3JvdW5kLWltYWdlOlxuXHRcdHJhZGlhbC1ncmFkaWVudCgjMjIyIDFweCx0cmFuc3BhcmVudCAwKSxcblx0XHRyYWRpYWwtZ3JhZGllbnQoIzIyMiAxcHgsdHJhbnNwYXJlbnQgMCk7XG5cdGJhY2tncm91bmQtY29sb3I6ICMxODFhMWI7XG5cdGJveC1zaGFkb3c6IDAgMnB4IDEycHggcmdiYSgwLDAsMCwwLjI1KTtcbn1cbi5kcmFnLWJvYXJkLWRhcmsgLmRyYWctYm9hcmQtY2FyZCB7XG5cdC8qIGJhY2tncm91bmQ6ICMyMzI3MmEgIWltcG9ydGFudDsgKi8gLyogUmVtb3ZlZCB0byBhbGxvdyB1c2VyLWRlZmluZWQgY29sb3JzICovXG5cdC8qIE9ubHkgb3ZlcnJpZGUgY29sb3IgaWYgYmFja2dyb3VuZCBpcyBleHBsaWNpdGx5IGRhcmssIG90aGVyd2lzZSBpbmhlcml0ICovXG5cdGNvbG9yOiAjMDAwO1xuXHRib3JkZXI6IDFweCBzb2xpZCAjNDQ0O1xuXHRib3gtc2hhZG93OiAycHggMnB4IDhweCByZ2JhKDAsMCwwLDAuMjUpO1xufVxuLmRyYWctYm9hcmQtY2FyZC5zZWxlY3RlZCB7XG5cdGJvcmRlcjogMnB4IHNvbGlkICM1YjlhZmYgIWltcG9ydGFudDtcblx0Ym94LXNoYWRvdzogMCAwIDAgMnB4ICNjM2UwZmY7XG59XG4uZHJhZy1ib2FyZC1kYXJrIC5kcmFnLWJvYXJkLWNhcmQuc2VsZWN0ZWQge1xuXHRib3JkZXI6IDJweCBzb2xpZCAjOGFiNGY4ICFpbXBvcnRhbnQ7XG5cdGJveC1zaGFkb3c6IDAgMCAwIDJweCAjMzE0YjZlO1xufVxuYDtcblx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fVxuXG5cdC8vIC0tLSBUb3AgYmFyIGNyZWF0aW9uIChzaGFyZWQpIC0tLVxuXHRjb25zdCB0b3BCYXIgPSBjcmVhdGVCb2FyZFRvcEJhcih7XG5cdFx0b25TaXplQ2hhbmdlOiAoaGVpZ2h0LCB3aWR0aCwgbW9kZSkgPT4ge1xuXHRcdFx0aWYgKG1vZGUgPT09IFwiZmlsbFwiKSB7XG5cdFx0XHRcdGJvYXJkLnN0eWxlLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCArIFwicHhcIjtcblx0XHRcdFx0Ym9hcmQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblx0XHRcdH0gZWxzZSBpZiAobW9kZSA9PT0gXCJkZWZhdWx0XCIpIHtcblx0XHRcdFx0Ym9hcmQuc3R5bGUuaGVpZ2h0ID0gXCIzMjBweFwiO1xuXHRcdFx0XHRib2FyZC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuXHRcdFx0fSBlbHNlIGlmIChtb2RlID09PSBcImN1c3RvbVwiICYmIGhlaWdodCAmJiB3aWR0aCkge1xuXHRcdFx0XHRib2FyZC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyBcInB4XCI7XG5cdFx0XHRcdGJvYXJkLnN0eWxlLndpZHRoID0gd2lkdGggKyBcInB4XCI7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHQvLyBBbHdheXMgc2hvdyBjb2xvciwgc2NhbGUsIGZvY3VzIHVubGVzcyBleHBsaWNpdGx5IHNldCBmYWxzZVxuXHRcdGVuYWJsZUNvbG9yOiB0cnVlLFxuXHRcdGVuYWJsZVNjYWxlOiB0cnVlLFxuXHRcdGVuYWJsZUZvY3VzOiB0cnVlLFxuXHR9LCBwbHVnaW4sIGZpbGUsIFwiaGlnaGxpZ2h0c1wiKTtcblxuXHRjb25zdCBib2FyZCA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6IFwiZHJhZy1ib2FyZC1jb250YWluZXJcIiB9KTtcblx0Ym9hcmQuc3R5bGUuYm9yZGVyUmFkaXVzID0gXCIwIDAgMTJweCAxMnB4XCI7XG5cdGJvYXJkLnN0eWxlLm1hcmdpblRvcCA9IFwiMFwiO1xuXHRib2FyZC5wcmVwZW5kKHRvcEJhcik7XG5cblx0LyogIENvbGxlY3QgPT1oaWdobGlnaHRzPT0gKHNraXAgY29kZSBibG9ja3MpICAqL1xuXHRjb25zdCBoaWdobGlnaHRzOiB7IGxhYmVsOiBzdHJpbmcgfVtdID0gW107XG5cdGNvbnN0IGhpZGRlbkxhYmVsczogc3RyaW5nW10gPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiZHJhZy1ib2FyZDpoaWRkZW5cIikgfHwgXCJbXVwiKTtcblx0bGV0IGluc2lkZUNvZGUgPSBmYWxzZTtcblx0Zm9yIChjb25zdCBsaW5lIG9mIG1hcmtkb3duLnNwbGl0KFwiXFxuXCIpKSB7XG5cdFx0aWYgKGxpbmUudHJpbSgpLnN0YXJ0c1dpdGgoXCJgYGBcIikpIHtcblx0XHRcdGluc2lkZUNvZGUgPSAhaW5zaWRlQ29kZTtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRpZiAoaW5zaWRlQ29kZSkgY29udGludWU7XG5cblx0XHRmb3IgKGNvbnN0IG0gb2YgbGluZS5tYXRjaEFsbCgvPT0oLis/KT09L2cpKSB7XG5cdFx0XHRoaWdobGlnaHRzLnB1c2goeyBsYWJlbDogbVsxXSB9KTtcblx0XHR9XG5cdH1cblxuXHQvKiAgUmVzdG9yZSBvciBzZWVkIHBvc2l0aW9ucyAgKi9cblx0Y29uc3Qgc3RvcmFnZUtleSA9IGBoaWdobGlnaHQtYm9hcmQ6JHtmaWxlUGF0aH1gO1xuXHRjb25zdCBzdG9yZWQ6IFJlY29yZDxzdHJpbmcsIFN0b3JlZENhcmQ+ID0gSlNPTi5wYXJzZShcblx0XHRsb2NhbFN0b3JhZ2UuZ2V0SXRlbShzdG9yYWdlS2V5KSB8fCBcInt9XCJcblx0KTtcblxuXHRmb3IgKGNvbnN0IGggb2YgaGlnaGxpZ2h0cykge1xuXHRcdGlmICghc3RvcmVkW2gubGFiZWxdKSB7XG5cdFx0XHRzdG9yZWRbaC5sYWJlbF0gPSB7XG5cdFx0XHRcdGxhYmVsOiBoLmxhYmVsLFxuXHRcdFx0XHR4OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNDApLFxuXHRcdFx0XHR5OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMjApLFxuXHRcdFx0XHRjb2xvcjpcblx0XHRcdFx0XHRwYXN0ZWxDb2xvcnNbXG5cdFx0XHRcdFx0XHRNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwYXN0ZWxDb2xvcnMubGVuZ3RoKVxuXHRcdFx0XHRcdF0sXG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXHQvLyBFbnN1cmUgaGlkZGVuIGxhYmVscyBhcmUgbm90IGxvc3QgYnkgYWRkaW5nIHRoZW0gdG8gdGhlIHN0b3JlZCBzdHJ1Y3R1cmUgaWYgbm90IHByZXNlbnQgZHVyaW5nIHNlZWRpbmdcblx0Zm9yIChjb25zdCBsYWJlbCBvZiBoaWRkZW5MYWJlbHMpIHtcblx0XHRpZiAoIXN0b3JlZFtsYWJlbF0pIHtcblx0XHRcdHN0b3JlZFtsYWJlbF0gPSB7XG5cdFx0XHRcdGxhYmVsLFxuXHRcdFx0XHR4OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNDApLFxuXHRcdFx0XHR5OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMjApLFxuXHRcdFx0XHRjb2xvcjogcGFzdGVsQ29sb3JzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBhc3RlbENvbG9ycy5sZW5ndGgpXSxcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cdGxvY2FsU3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXksIEpTT04uc3RyaW5naWZ5KHN0b3JlZCkpO1xuXG5cdC8vIC0tLSBTZWxlY3Rpb24gc3RhdGUgZm9yIGhpZ2hsaWdodCBib2FyZCAtLS1cblx0bGV0IHNlbGVjdGVkQ2FyZDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcblx0bGV0IHNlbGVjdGVkTGFiZWw6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG5cdC8qICBSZW5kZXIgdGhlIGNhcmRzICAqL1xuXHRmb3IgKGNvbnN0IHsgbGFiZWwgfSBvZiBoaWdobGlnaHRzKSB7XG5cdFx0Y29uc3QgaW5mbyA9IHN0b3JlZFtsYWJlbF07XG5cblx0XHRjb25zdCBjYXJkID0gYm9hcmQuY3JlYXRlRGl2KHsgY2xzOiBcImRyYWctYm9hcmQtY2FyZFwiIH0pO1xuXHRcdGNhcmQudGV4dENvbnRlbnQgPSBsYWJlbDtcblx0XHQvLyBIaWRlIGNhcmQgaWYgaXRzIGxhYmVsIGlzIGluIGhpZGRlbkxhYmVsc1xuXHRcdGlmIChoaWRkZW5MYWJlbHMuaW5jbHVkZXMobGFiZWwpKSB7XG5cdFx0XHRjYXJkLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblx0XHR9XG5cdFx0Y2FyZC5zdHlsZS5sZWZ0ID0gYCR7aW5mby54fXB4YDtcblx0XHRjYXJkLnN0eWxlLnRvcCA9IGAke2luZm8ueX1weGA7XG5cdFx0Y2FyZC5zdHlsZS5iYWNrZ3JvdW5kID0gaW5mby5jb2xvcjtcblxuXHRcdGxldCBzdGFydFggPSAwLFxuXHRcdFx0c3RhcnRZID0gMCxcblx0XHRcdG9yaWdYID0gMCxcblx0XHRcdG9yaWdZID0gMDtcblxuXHRcdGNhcmQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIChlKSA9PiB7XG5cdFx0XHRzdGFydFggPSBlLmNsaWVudFg7XG5cdFx0XHRzdGFydFkgPSBlLmNsaWVudFk7XG5cdFx0XHRvcmlnWCA9IHBhcnNlSW50KGNhcmQuc3R5bGUubGVmdCk7XG5cdFx0XHRvcmlnWSA9IHBhcnNlSW50KGNhcmQuc3R5bGUudG9wKTtcblx0XHRcdGNhcmQuc2V0UG9pbnRlckNhcHR1cmUoZS5wb2ludGVySWQpO1xuXHRcdFx0Y2FyZC5jbGFzc0xpc3QuYWRkKFwiZHJhZ2dpbmdcIik7XG5cdFx0fSk7XG5cblx0XHRjYXJkLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCAoZSkgPT4ge1xuXHRcdFx0aWYgKCFjYXJkLmhhc1BvaW50ZXJDYXB0dXJlKGUucG9pbnRlcklkKSkgcmV0dXJuO1xuXHRcdFx0Y29uc3QgZHggPSBlLmNsaWVudFggLSBzdGFydFg7XG5cdFx0XHRjb25zdCBkeSA9IGUuY2xpZW50WSAtIHN0YXJ0WTtcblx0XHRcdGNhcmQuc3R5bGUubGVmdCA9IGAke29yaWdYICsgZHh9cHhgO1xuXHRcdFx0Y2FyZC5zdHlsZS50b3AgPSBgJHtvcmlnWSArIGR5fXB4YDtcblx0XHR9KTtcblxuXHRcdGNhcmQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCAoZSkgPT4ge1xuXHRcdFx0Y2FyZC5yZWxlYXNlUG9pbnRlckNhcHR1cmUoZS5wb2ludGVySWQpO1xuXHRcdFx0Y2FyZC5jbGFzc0xpc3QucmVtb3ZlKFwiZHJhZ2dpbmdcIik7XG5cblx0XHRcdGluZm8ueCA9IHBhcnNlSW50KGNhcmQuc3R5bGUubGVmdCk7XG5cdFx0XHRpbmZvLnkgPSBwYXJzZUludChjYXJkLnN0eWxlLnRvcCk7XG5cdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShzdG9yYWdlS2V5LCBKU09OLnN0cmluZ2lmeShzdG9yZWQpKTtcblx0XHR9KTtcblxuXHRcdC8vIC0tLSBTZWxlY3Rpb24gbG9naWMgZm9yIGhpZ2hsaWdodHMgLS0tXG5cdFx0Y2FyZC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuXHRcdFx0aWYgKHNlbGVjdGVkQ2FyZCkgc2VsZWN0ZWRDYXJkLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcblx0XHRcdGlmIChzZWxlY3RlZENhcmQgPT09IGNhcmQpIHtcblx0XHRcdFx0c2VsZWN0ZWRDYXJkID0gbnVsbDtcblx0XHRcdFx0c2VsZWN0ZWRMYWJlbCA9IG51bGw7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxlY3RlZENhcmQgPSBjYXJkO1xuXHRcdFx0XHRzZWxlY3RlZExhYmVsID0gbGFiZWw7XG5cdFx0XHRcdGNhcmQuY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVRhc2tCb2FyZChcblx0Y29udGFpbmVyOiBIVE1MRWxlbWVudCxcblx0bWFya2Rvd246IHN0cmluZyxcblx0ZmlsZVBhdGg6IHN0cmluZyxcblx0cGx1Z2luOiBQbHVnaW4sXG5cdGZpbGU6IFRGaWxlXG4pIHtcblx0Ly8gU3R5bGUgaW5qZWN0aW9uIGlzIGhhbmRsZWQgYWJvdmUgaW4gaGlnaGxpZ2h0IGJvYXJkLCBzbyBza2lwIGhlcmUuXG5cblx0Ly8gLS0tIFRvcCBiYXIgY3JlYXRpb24gKHNoYXJlZCkgLS0tXG5cdGNvbnN0IGJvYXJkID0gY29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogXCJkcmFnLWJvYXJkLWNvbnRhaW5lclwiIH0pO1xuXHRib2FyZC5zdHlsZS5ib3JkZXJSYWRpdXMgPSBcIjAgMCAxMnB4IDEycHhcIjtcblx0Ym9hcmQuc3R5bGUubWFyZ2luVG9wID0gXCIwXCI7XG5cdGNvbnN0IHRvcEJhciA9IGNyZWF0ZUJvYXJkVG9wQmFyKHtcblx0XHRvblNpemVDaGFuZ2U6IChoZWlnaHQsIHdpZHRoLCBtb2RlKSA9PiB7XG5cdFx0XHRpZiAobW9kZSA9PT0gXCJmaWxsXCIpIHtcblx0XHRcdFx0Ym9hcmQuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0ICsgXCJweFwiO1xuXHRcdFx0XHRib2FyZC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuXHRcdFx0fSBlbHNlIGlmIChtb2RlID09PSBcImRlZmF1bHRcIikge1xuXHRcdFx0XHRib2FyZC5zdHlsZS5oZWlnaHQgPSBcIjMyMHB4XCI7XG5cdFx0XHRcdGJvYXJkLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG5cdFx0XHR9IGVsc2UgaWYgKG1vZGUgPT09IFwiY3VzdG9tXCIgJiYgaGVpZ2h0ICYmIHdpZHRoKSB7XG5cdFx0XHRcdGJvYXJkLnN0eWxlLmhlaWdodCA9IGhlaWdodCArIFwicHhcIjtcblx0XHRcdFx0Ym9hcmQuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGVuYWJsZUNvbG9yOiB0cnVlLFxuXHRcdGVuYWJsZVNjYWxlOiB0cnVlLFxuXHRcdGVuYWJsZUZvY3VzOiB0cnVlLFxuXHRcdGdldFNlbGVjdGVkOiAoKSA9PiAoe1xuXHRcdFx0c2VsZWN0ZWRDYXJkLFxuXHRcdFx0c2VsZWN0ZWRDYXJkTGFiZWwsXG5cdFx0XHRzZWxlY3RlZENhcmRMaW5lLFxuXHRcdH0pLFxuXHRcdHNldENhcmRDb2xvcjogKGxhYmVsOiBzdHJpbmcsIGNvbG9yOiBzdHJpbmcpID0+IHtcblx0XHRcdGlmIChsYWJlbCAmJiBjYXJkQ29sb3JzW2xhYmVsXSAmJiBjYXJkVG9JbmZvKSB7XG5cdFx0XHRcdGNhcmRDb2xvcnNbbGFiZWxdID0gY29sb3I7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvbkNvbG9yQ2hhbmdlOiAoY29sb3I6IHN0cmluZykgPT4ge1xuXHRcdFx0aWYgKHNlbGVjdGVkQ2FyZCAmJiBzZWxlY3RlZENhcmRMYWJlbCkge1xuXHRcdFx0XHRzZWxlY3RlZENhcmQuc3R5bGUuYmFja2dyb3VuZCA9IGNvbG9yO1xuXHRcdFx0XHRjYXJkQ29sb3JzW3NlbGVjdGVkQ2FyZExhYmVsXSA9IGNvbG9yO1xuXHRcdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShzdG9yYWdlS2V5ICsgXCI6Y29sb3JzXCIsIEpTT04uc3RyaW5naWZ5KGNhcmRDb2xvcnMpKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG9uU2NhbGVDaGFuZ2U6IChkZWx0YTogbnVtYmVyKSA9PiB7XG5cdFx0XHRpZiAoIXNlbGVjdGVkQ2FyZCB8fCAhc2VsZWN0ZWRDYXJkTGFiZWwpIHJldHVybjtcblx0XHRcdGNvbnN0IHByZXYgPSBjYXJkU2NhbGVzW3NlbGVjdGVkQ2FyZExhYmVsXSB8fCAxO1xuXHRcdFx0bGV0IG5leHQgPSBNYXRoLm1heCgwLjMsIE1hdGgubWluKDIuNSwgcHJldiArIGRlbHRhKSk7XG5cdFx0XHRjYXJkU2NhbGVzW3NlbGVjdGVkQ2FyZExhYmVsXSA9IG5leHQ7XG5cdFx0XHRzZWxlY3RlZENhcmQuc3R5bGUudHJhbnNmb3JtID0gYHNjYWxlKCR7bmV4dH0pYDtcblx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXkgKyBcIjpzY2FsZXNcIiwgSlNPTi5zdHJpbmdpZnkoY2FyZFNjYWxlcykpO1xuXHRcdH0sXG5cdFx0b25Gb2N1czogYXN5bmMgKCkgPT4ge1xuXHRcdFx0aWYgKCFzZWxlY3RlZENhcmQgfHwgc2VsZWN0ZWRDYXJkTGFiZWwgPT0gbnVsbCB8fCBzZWxlY3RlZENhcmRMaW5lID09IG51bGwpIHJldHVybjtcblx0XHRcdGNvbnN0IGxlYWYgPSBhd2FpdCBwbHVnaW4uYXBwLndvcmtzcGFjZS5vcGVuTGlua1RleHQoZmlsZS5wYXRoLCAnJywgZmFsc2UpO1xuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHZpZXcgPSBwbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoXCJtYXJrZG93blwiKS5maW5kKGwgPT4gbC52aWV3LmZpbGU/LnBhdGggPT09IGZpbGUucGF0aCk/LnZpZXc7XG5cdFx0XHRcdGlmICh2aWV3ICYmIFwiZWRpdG9yXCIgaW4gdmlldykge1xuXHRcdFx0XHRcdGNvbnN0IGVkaXRvciA9ICh2aWV3IGFzIGFueSkuZWRpdG9yO1xuXHRcdFx0XHRcdGNvbnN0IGxpbmVUb0dvID0gc2VsZWN0ZWRDYXJkTGluZSE7XG5cdFx0XHRcdFx0ZWRpdG9yLnNjcm9sbEludG9WaWV3KHsgZnJvbTogeyBsaW5lOiBsaW5lVG9HbywgY2g6IDAgfSwgdG86IHsgbGluZTogbGluZVRvR28sIGNoOiAwIH0gfSk7XG5cdFx0XHRcdFx0ZWRpdG9yLnNldEN1cnNvcih7IGxpbmU6IGxpbmVUb0dvLCBjaDogMCB9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgMTAwKTtcblx0XHR9LFxuXHRcdHBhc3RlbENvbG9ycyxcblx0fSwgcGx1Z2luLCBmaWxlLCBcInRhc2tzXCIpO1xuXHRib2FyZC5wcmVwZW5kKHRvcEJhcik7XG5cblx0LyogIENvbGxlY3QgLSBbIF0gdGFza3MgKHNraXAgY29kZSBibG9ja3MpICAqL1xuXHRjb25zdCB0YXNrczogeyBsYWJlbDogc3RyaW5nOyBsaW5lTnVtYmVyOiBudW1iZXIgfVtdID0gW107XG5cdGxldCBpbnNpZGVDb2RlID0gZmFsc2U7XG5cdGNvbnN0IGxpbmVzID0gbWFya2Rvd24uc3BsaXQoXCJcXG5cIik7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcblx0XHRjb25zdCBsaW5lID0gbGluZXNbaV07XG5cdFx0aWYgKGxpbmUudHJpbSgpLnN0YXJ0c1dpdGgoXCJgYGBcIikpIHtcblx0XHRcdGluc2lkZUNvZGUgPSAhaW5zaWRlQ29kZTtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRpZiAoaW5zaWRlQ29kZSkgY29udGludWU7XG5cblx0XHRjb25zdCBtYXRjaCA9IGxpbmUubWF0Y2goL15cXHMqLVxcc1xcW1xcc1xcXVxccyguKykvKTtcblx0XHRpZiAobWF0Y2gpIHtcblx0XHRcdHRhc2tzLnB1c2goeyBsYWJlbDogbWF0Y2hbMV0sIGxpbmVOdW1iZXI6IGkgfSk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKHRhc2tzLmxlbmd0aCA9PT0gMCkge1xuXHRcdGJvYXJkLmNyZWF0ZUVsKFwicFwiLCB7IHRleHQ6IFwiTm8gdW5jaGVja2VkIHRhc2tzIGZvdW5kIGluIHRoaXMgbm90ZS5cIiB9KTtcblx0fVxuXG5cdC8qICBSZXN0b3JlIG9yIHNlZWQgcG9zaXRpb25zICAqL1xuXHRjb25zdCBzdG9yYWdlS2V5ID0gYHRhc2stYm9hcmQ6JHtmaWxlUGF0aH1gO1xuXHRjb25zdCBzdG9yZWQ6IFJlY29yZDxzdHJpbmcsIFN0b3JlZENhcmQ+ID0gSlNPTi5wYXJzZShcblx0XHRsb2NhbFN0b3JhZ2UuZ2V0SXRlbShzdG9yYWdlS2V5KSB8fCBcInt9XCJcblx0KTtcblxuXHRmb3IgKGNvbnN0IHQgb2YgdGFza3MpIHtcblx0XHRpZiAoIXN0b3JlZFt0LmxhYmVsXSkge1xuXHRcdFx0c3RvcmVkW3QubGFiZWxdID0ge1xuXHRcdFx0XHRsYWJlbDogdC5sYWJlbCxcblx0XHRcdFx0eDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjQwKSxcblx0XHRcdFx0eTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTIwKSxcblx0XHRcdFx0Y29sb3I6XG5cdFx0XHRcdFx0cGFzdGVsQ29sb3JzW1xuXHRcdFx0XHRcdFx0TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcGFzdGVsQ29sb3JzLmxlbmd0aClcblx0XHRcdFx0XHRdLFxuXHRcdFx0fTtcblx0XHR9XG5cdH1cblx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSwgSlNPTi5zdHJpbmdpZnkoc3RvcmVkKSk7XG5cblx0Ly8gLS0tIFNlbGVjdGlvbiBzdGF0ZSAtLS1cblx0bGV0IHNlbGVjdGVkQ2FyZDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcblx0bGV0IHNlbGVjdGVkQ2FyZExhYmVsOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblx0bGV0IHNlbGVjdGVkQ2FyZExpbmU6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXHRsZXQgY2FyZFRvSW5mbyA9IG5ldyBNYXA8SFRNTEVsZW1lbnQsIHsgbGFiZWw6IHN0cmluZzsgbGluZU51bWJlcjogbnVtYmVyOyBpbmZvOiBTdG9yZWRDYXJkIH0+KCk7XG5cdGxldCBjYXJkU2NhbGVzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShzdG9yYWdlS2V5ICsgXCI6c2NhbGVzXCIpIHx8IFwie31cIik7XG5cdGxldCBjYXJkQ29sb3JzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShzdG9yYWdlS2V5ICsgXCI6Y29sb3JzXCIpIHx8IFwie31cIik7XG5cblx0Ly8gLS0tIFJlbmRlciB0aGUgY2FyZHMgLS0tXG5cdGZvciAoY29uc3QgeyBsYWJlbCwgbGluZU51bWJlciB9IG9mIHRhc2tzKSB7XG5cdFx0Y29uc3QgaW5mbyA9IHN0b3JlZFtsYWJlbF07XG5cdFx0Y29uc3QgY2FyZCA9IGJvYXJkLmNyZWF0ZURpdih7IGNsczogXCJkcmFnLWJvYXJkLWNhcmRcIiB9KTtcblx0XHRjYXJkLnN0eWxlLmxlZnQgPSBgJHtpbmZvLnh9cHhgO1xuXHRcdGNhcmQuc3R5bGUudG9wID0gYCR7aW5mby55fXB4YDtcblx0XHRjYXJkLnN0eWxlLmJhY2tncm91bmQgPSBjYXJkQ29sb3JzW2xhYmVsXSB8fCBpbmZvLmNvbG9yO1xuXG5cdFx0Y29uc3Qgc2NhbGUgPSBjYXJkU2NhbGVzW2xhYmVsXSB8fCAxO1xuXHRcdGNhcmQuc3R5bGUudHJhbnNmb3JtID0gYHNjYWxlKCR7c2NhbGV9KWA7XG5cblx0XHRjb25zdCBjaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRjaGVja2JveC50eXBlID0gXCJjaGVja2JveFwiO1xuXHRcdGNoZWNrYm94LmNoZWNrZWQgPSBtYXJrZG93bi5pbmNsdWRlcyhgLSBbeF0gJHtsYWJlbH1gKTtcblx0XHRjaGVja2JveC5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNnB4XCI7XG5cdFx0Y2FyZC5wcmVwZW5kKGNoZWNrYm94KTtcblxuXHRcdGNvbnN0IGxhYmVsU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXHRcdGxhYmVsU3Bhbi50ZXh0Q29udGVudCA9IGxhYmVsO1xuXHRcdGNhcmQuYXBwZW5kQ2hpbGQobGFiZWxTcGFuKTtcblxuXHRcdGxldCBzdGFydFggPSAwLFxuXHRcdFx0c3RhcnRZID0gMCxcblx0XHRcdG9yaWdYID0gMCxcblx0XHRcdG9yaWdZID0gMDtcblxuXHRcdGNhcmQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIChlKSA9PiB7XG5cdFx0XHRpZiAoZS50YXJnZXQgPT09IGNoZWNrYm94KSByZXR1cm47IC8vIGRvbid0IGRyYWcgd2hlbiBpbnRlcmFjdGluZyB3aXRoIGNoZWNrYm94XG5cdFx0XHRzdGFydFggPSBlLmNsaWVudFg7XG5cdFx0XHRzdGFydFkgPSBlLmNsaWVudFk7XG5cdFx0XHRvcmlnWCA9IHBhcnNlSW50KGNhcmQuc3R5bGUubGVmdCk7XG5cdFx0XHRvcmlnWSA9IHBhcnNlSW50KGNhcmQuc3R5bGUudG9wKTtcblx0XHRcdGNhcmQuc2V0UG9pbnRlckNhcHR1cmUoZS5wb2ludGVySWQpO1xuXHRcdFx0Y2FyZC5jbGFzc0xpc3QuYWRkKFwiZHJhZ2dpbmdcIik7XG5cdFx0fSk7XG5cblx0XHRjYXJkLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCAoZSkgPT4ge1xuXHRcdFx0aWYgKCFjYXJkLmhhc1BvaW50ZXJDYXB0dXJlKGUucG9pbnRlcklkKSkgcmV0dXJuO1xuXHRcdFx0Y29uc3QgZHggPSBlLmNsaWVudFggLSBzdGFydFg7XG5cdFx0XHRjb25zdCBkeSA9IGUuY2xpZW50WSAtIHN0YXJ0WTtcblx0XHRcdGNhcmQuc3R5bGUubGVmdCA9IGAke29yaWdYICsgZHh9cHhgO1xuXHRcdFx0Y2FyZC5zdHlsZS50b3AgPSBgJHtvcmlnWSArIGR5fXB4YDtcblx0XHR9KTtcblxuXHRcdGNhcmQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCAoZSkgPT4ge1xuXHRcdFx0aWYgKGNhcmQuaGFzUG9pbnRlckNhcHR1cmUoZS5wb2ludGVySWQpKSB7XG5cdFx0XHRcdGNhcmQucmVsZWFzZVBvaW50ZXJDYXB0dXJlKGUucG9pbnRlcklkKTtcblx0XHRcdFx0Y2FyZC5jbGFzc0xpc3QucmVtb3ZlKFwiZHJhZ2dpbmdcIik7XG5cdFx0XHRcdGluZm8ueCA9IHBhcnNlSW50KGNhcmQuc3R5bGUubGVmdCk7XG5cdFx0XHRcdGluZm8ueSA9IHBhcnNlSW50KGNhcmQuc3R5bGUudG9wKTtcblx0XHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSwgSlNPTi5zdHJpbmdpZnkoc3RvcmVkKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRjaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGFzeW5jICgpID0+IHtcblx0XHRcdC8vIFVwZGF0ZSB0aGUgdGFzayBsaW5lIGluIHRoZSBmaWxlXG5cdFx0XHRsZXQgY29udGVudCA9IGF3YWl0IHBsdWdpbi5hcHAudmF1bHQucmVhZChmaWxlKTtcblx0XHRcdGNvbnN0IGNvbnRlbnRMaW5lcyA9IGNvbnRlbnQuc3BsaXQoXCJcXG5cIik7XG5cdFx0XHRsZXQgdXBkYXRlZCA9IGZhbHNlO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50TGluZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Y29uc3QgbGluZSA9IGNvbnRlbnRMaW5lc1tpXTtcblx0XHRcdFx0Y29uc3QgcmVnZXhVbmNoZWNrZWQgPSBuZXcgUmVnRXhwKGBeXFxcXHMqLSBcXFxcWyBcXFxcXSAke2VzY2FwZVJlZ0V4cChsYWJlbCl9JGApO1xuXHRcdFx0XHRjb25zdCByZWdleENoZWNrZWQgPSBuZXcgUmVnRXhwKGBeXFxcXHMqLSBcXFxcW3hcXFxcXSAke2VzY2FwZVJlZ0V4cChsYWJlbCl9JGApO1xuXHRcdFx0XHRpZiAoY2hlY2tib3guY2hlY2tlZCAmJiByZWdleFVuY2hlY2tlZC50ZXN0KGxpbmUpKSB7XG5cdFx0XHRcdFx0Y29udGVudExpbmVzW2ldID0gbGluZS5yZXBsYWNlKFwiLSBbIF1cIiwgXCItIFt4XVwiKTtcblx0XHRcdFx0XHR1cGRhdGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fSBlbHNlIGlmICghY2hlY2tib3guY2hlY2tlZCAmJiByZWdleENoZWNrZWQudGVzdChsaW5lKSkge1xuXHRcdFx0XHRcdGNvbnRlbnRMaW5lc1tpXSA9IGxpbmUucmVwbGFjZShcIi0gW3hdXCIsIFwiLSBbIF1cIik7XG5cdFx0XHRcdFx0dXBkYXRlZCA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICh1cGRhdGVkKSB7XG5cdFx0XHRcdGF3YWl0IHBsdWdpbi5hcHAudmF1bHQubW9kaWZ5KGZpbGUsIGNvbnRlbnRMaW5lcy5qb2luKFwiXFxuXCIpKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIC0tLSBTZWxlY3Rpb24gbG9naWMgLS0tXG5cdFx0Y2FyZC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdGlmIChlLnRhcmdldCA9PT0gY2hlY2tib3gpIHJldHVybjtcblx0XHRcdGlmIChzZWxlY3RlZENhcmQpIHNlbGVjdGVkQ2FyZC5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0ZWRcIik7XG5cdFx0XHRpZiAoc2VsZWN0ZWRDYXJkID09PSBjYXJkKSB7XG5cdFx0XHRcdHNlbGVjdGVkQ2FyZCA9IG51bGw7XG5cdFx0XHRcdHNlbGVjdGVkQ2FyZExhYmVsID0gbnVsbDtcblx0XHRcdFx0c2VsZWN0ZWRDYXJkTGluZSA9IG51bGw7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxlY3RlZENhcmQgPSBjYXJkO1xuXHRcdFx0XHRzZWxlY3RlZENhcmRMYWJlbCA9IGxhYmVsO1xuXHRcdFx0XHRzZWxlY3RlZENhcmRMaW5lID0gbGluZU51bWJlcjtcblx0XHRcdFx0Y2FyZC5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0Y2FyZFRvSW5mby5zZXQoY2FyZCwgeyBsYWJlbCwgbGluZU51bWJlciwgaW5mbyB9KTtcblx0fVxuXG5cdC8vIFNlbGVjdGlvbiBzdHlsZSBmb3IgdGFza3MgYm9hcmQgaXMgbm93IGluIHNoYXJlZCBpbmplY3RlZCBzdHlsZSBibG9jay5cbn1cblxuLy8gLS0tIFNoYXJlZCBUb3AgQmFyIC0tLVxudHlwZSBCb2FyZFRvcEJhck9wdGlvbnMgPSB7XG5cdG9uU2l6ZUNoYW5nZTogKGhlaWdodDogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBtb2RlOiBzdHJpbmcpID0+IHZvaWQ7XG5cdGVuYWJsZUNvbG9yPzogYm9vbGVhbjtcblx0ZW5hYmxlU2NhbGU/OiBib29sZWFuO1xuXHRlbmFibGVGb2N1cz86IGJvb2xlYW47XG5cdGdldFNlbGVjdGVkPzogKCkgPT4geyBzZWxlY3RlZENhcmQ6IEhUTUxFbGVtZW50IHwgbnVsbCwgc2VsZWN0ZWRDYXJkTGFiZWw6IHN0cmluZyB8IG51bGwsIHNlbGVjdGVkQ2FyZExpbmU6IG51bWJlciB8IG51bGwgfTtcblx0c2V0Q2FyZENvbG9yPzogKGxhYmVsOiBzdHJpbmcsIGNvbG9yOiBzdHJpbmcpID0+IHZvaWQ7XG5cdG9uQ29sb3JDaGFuZ2U/OiAoY29sb3I6IHN0cmluZykgPT4gdm9pZDtcblx0b25TY2FsZUNoYW5nZT86IChkZWx0YTogbnVtYmVyKSA9PiB2b2lkO1xuXHRvbkZvY3VzPzogKCkgPT4gdm9pZDtcblx0cGFzdGVsQ29sb3JzPzogc3RyaW5nW107XG59O1xuZnVuY3Rpb24gY3JlYXRlQm9hcmRUb3BCYXIoXG5cdG9wdHM6IEJvYXJkVG9wQmFyT3B0aW9ucyxcblx0cGx1Z2luPzogUGx1Z2luLFxuXHRmaWxlPzogVEZpbGUsXG5cdGluaXRpYWxNb2RlOiBzdHJpbmcgPSBcImhpZ2hsaWdodHNcIlxuKTogSFRNTEVsZW1lbnQge1xuXHRjb25zdCB0b3BCYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHR0b3BCYXIuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuXHR0b3BCYXIuc3R5bGUuYWxpZ25JdGVtcyA9IFwiY2VudGVyXCI7XG5cdHRvcEJhci5zdHlsZS5nYXAgPSBcIjRweFwiO1xuXHR0b3BCYXIuc3R5bGUuYm9yZGVyID0gXCJub25lXCI7XG5cdC8vIFJlbW92ZWQgYm9yZGVyQm90dG9tIHBlciBpbnN0cnVjdGlvbnNcblx0Ly8gdG9wQmFyLnN0eWxlLmJvcmRlckJvdHRvbSA9IFwiMXB4IGRhc2hlZCAjYWFhXCI7XG5cdHRvcEJhci5zdHlsZS5ib3JkZXJSYWRpdXMgPSBcIjBcIjtcblx0dG9wQmFyLnN0eWxlLnBhZGRpbmcgPSBcIjAgNnB4XCI7XG5cdHRvcEJhci5zdHlsZS5iYWNrZ3JvdW5kID0gXCIjZmFmYmZjXCI7XG5cdHRvcEJhci5zdHlsZS5oZWlnaHQgPSBcIjIwcHhcIjtcblx0dG9wQmFyLnN0eWxlLmZvbnRGYW1pbHkgPSBcIm1vbm9zcGFjZVwiO1xuXHQvLyAtLS0gVGhlbWUgdG9nZ2xlIGJ1dHRvbiAtLS1cblx0Y29uc3QgdGhlbWVCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuXHR0aGVtZUJ0bi50eXBlID0gXCJidXR0b25cIjtcblx0dGhlbWVCdG4udGl0bGUgPSBcIlRvZ2dsZSBkYXJrL2xpZ2h0IG1vZGVcIjtcblx0dGhlbWVCdG4uc3R5bGUuZm9udFNpemUgPSBcIjE0cHhcIjtcblx0dGhlbWVCdG4uc3R5bGUucGFkZGluZyA9IFwiMCA2cHhcIjtcblx0dGhlbWVCdG4uc3R5bGUubWFyZ2luUmlnaHQgPSBcIjRweFwiO1xuXHRsZXQgaXNEYXJrID0gZmFsc2U7XG5cdHRoZW1lQnRuLnRleHRDb250ZW50ID0gXCJcdUQ4M0NcdURGMTlcIjtcblx0dG9wQmFyLmFwcGVuZENoaWxkKHRoZW1lQnRuKTtcblx0dGhlbWVCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcblx0XHRjb25zdCBjb250YWluZXIgPSB0b3BCYXIucGFyZW50RWxlbWVudCB8fCB0b3BCYXIuY2xvc2VzdChcIi5kcmFnLWJvYXJkLWNvbnRhaW5lclwiKTtcblx0XHRsZXQgYm9hcmRDb250YWluZXIgPSBjb250YWluZXI7XG5cdFx0Ly8gSWYgdG9wQmFyIGlzIG5vdCBkaXJlY3QgY2hpbGQsIGZpbmQgY2xvc2VzdCBkcmFnLWJvYXJkLWNvbnRhaW5lclxuXHRcdGlmICghYm9hcmRDb250YWluZXI/LmNsYXNzTGlzdC5jb250YWlucyhcImRyYWctYm9hcmQtY29udGFpbmVyXCIpKSB7XG5cdFx0XHRib2FyZENvbnRhaW5lciA9IHRvcEJhci5jbG9zZXN0KFwiLmRyYWctYm9hcmQtY29udGFpbmVyXCIpO1xuXHRcdH1cblx0XHRpZiAoYm9hcmRDb250YWluZXIpIHtcblx0XHRcdGlzRGFyayA9ICFib2FyZENvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoXCJkcmFnLWJvYXJkLWRhcmtcIik7XG5cdFx0XHRpZiAoaXNEYXJrKSB7XG5cdFx0XHRcdGJvYXJkQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJkcmFnLWJvYXJkLWRhcmtcIik7XG5cdFx0XHRcdHRoZW1lQnRuLnRleHRDb250ZW50ID0gXCJcdTI2MDBcdUZFMEZcIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJvYXJkQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJkcmFnLWJvYXJkLWRhcmtcIik7XG5cdFx0XHRcdHRoZW1lQnRuLnRleHRDb250ZW50ID0gXCJcdUQ4M0NcdURGMTlcIjtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdC8vIC0tLSBNb2RlIHNlbGVjdG9yIGRyb3Bkb3duIC0tLVxuXHRjb25zdCBtb2RlU2VsZWN0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpO1xuXHRtb2RlU2VsZWN0b3Iuc3R5bGUuZm9udFNpemUgPSBcIjhweFwiO1xuXHRbXCJoaWdobGlnaHRzXCIsIFwidGFza3NcIl0uZm9yRWFjaChtID0+IHtcblx0XHRjb25zdCBvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcblx0XHRvLnZhbHVlID0gbTtcblx0XHRvLnRleHRDb250ZW50ID0gbTtcblx0XHRtb2RlU2VsZWN0b3IuYXBwZW5kQ2hpbGQobyk7XG5cdH0pO1xuXHRtb2RlU2VsZWN0b3IudmFsdWUgPSBpbml0aWFsTW9kZTsgICAgICAvLyBzaG93IGN1cnJlbnQgbW9kZVxuXG5cdG1vZGVTZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsICgpID0+IHtcblx0XHRjb25zdCBjb250YWluZXIgPSB0b3BCYXIuY2xvc2VzdChcIi5kcmFnLWJvYXJkLWNvbnRhaW5lclwiKTtcblx0XHRjb25zdCBjaGlsZCA9IChjb250YWluZXIgYXMgYW55KT8uX2RyYWdCb2FyZENoaWxkO1xuXHRcdGlmIChjaGlsZD8uc2V0TW9kZSkgY2hpbGQuc2V0TW9kZShtb2RlU2VsZWN0b3IudmFsdWUpO1xuXHR9KTtcblx0dG9wQmFyLmFwcGVuZENoaWxkKG1vZGVTZWxlY3Rvcik7XG5cblx0Ly8gRHJvcGRvd24gZm9yIHNpemVcblx0Y29uc3Qgc2l6ZVNlbGVjdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcblx0c2l6ZVNlbGVjdG9yLnN0eWxlLmJvcmRlclJhZGl1cyA9IFwiNHB4XCI7XG5cdHNpemVTZWxlY3Rvci5zdHlsZS5wYWRkaW5nUmlnaHQgPSBcIjE2cHhcIjtcblx0c2l6ZVNlbGVjdG9yLnN0eWxlLmJhY2tncm91bmQgPSBcIndoaXRlIHVybCgnZGF0YTppbWFnZS9zdmcreG1sO3V0ZjgsPHN2ZyBmaWxsPVxcXCJncmF5XFxcIiBoZWlnaHQ9XFxcIjEyXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIHdpZHRoPVxcXCIxMlxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBkPVxcXCJNNS41MTYgNy41NDhhLjYyNS42MjUgMCAwIDEgLjg4NC0uMDY0TDEwIDEwLjg5MmwzLjYtMy40MDhhLjYyNS42MjUgMCAxIDEgLjg0OC45MmwtNCAzLjc4OGEuNjI1LjYyNSAwIDAgMS0uODQ4IDBsLTQtMy43ODhhLjYyNS42MjUgMCAwIDEtLjA2NC0uODg0elxcXCIvPjwvc3ZnPicpIG5vLXJlcGVhdCByaWdodCA0cHggY2VudGVyLzEycHggMTJweFwiO1xuXHRzaXplU2VsZWN0b3Iuc3R5bGUuZm9udFNpemUgPSBcIjhweFwiO1xuXHRjb25zdCBvcHRpb25zID0gW1xuXHRcdHsgdmFsdWU6IFwiZGVmYXVsdFwiLCB0ZXh0OiBcImRlZmF1bHRcIiB9LFxuXHRcdHsgdmFsdWU6IFwiZmlsbFwiLCB0ZXh0OiBcImZpbGxcIiB9LFxuXHRcdHsgdmFsdWU6IFwiY3VzdG9tXCIsIHRleHQ6IFwiY3VzdG9tXCIgfSxcblx0XTtcblx0Zm9yIChjb25zdCBvcHQgb2Ygb3B0aW9ucykge1xuXHRcdGNvbnN0IG9wdGlvbkVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcblx0XHRvcHRpb25FbC52YWx1ZSA9IG9wdC52YWx1ZTtcblx0XHRvcHRpb25FbC50ZXh0Q29udGVudCA9IG9wdC50ZXh0O1xuXHRcdHNpemVTZWxlY3Rvci5hcHBlbmRDaGlsZChvcHRpb25FbCk7XG5cdH1cblx0dG9wQmFyLmFwcGVuZENoaWxkKHNpemVTZWxlY3Rvcik7XG5cblx0Ly8gQ3VzdG9tIHNpemUgZmllbGRzXG5cdGNvbnN0IGhlaWdodElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRoZWlnaHRJbnB1dC50eXBlID0gXCJudW1iZXJcIjtcblx0aGVpZ2h0SW5wdXQucGxhY2Vob2xkZXIgPSBcIkhlaWdodFwiO1xuXHRoZWlnaHRJbnB1dC5zdHlsZS53aWR0aCA9IFwiNjBweFwiO1xuXHRoZWlnaHRJbnB1dC5taW4gPSBcIjFcIjtcblx0aGVpZ2h0SW5wdXQuc3R5bGUuZm9udFNpemUgPSBcIjhweFwiO1xuXHRjb25zdCB3aWR0aElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHR3aWR0aElucHV0LnR5cGUgPSBcIm51bWJlclwiO1xuXHR3aWR0aElucHV0LnBsYWNlaG9sZGVyID0gXCJXaWR0aFwiO1xuXHR3aWR0aElucHV0LnN0eWxlLndpZHRoID0gXCI2MHB4XCI7XG5cdHdpZHRoSW5wdXQubWluID0gXCIxXCI7XG5cdHdpZHRoSW5wdXQuc3R5bGUuZm9udFNpemUgPSBcIjhweFwiO1xuXHRjb25zdCBjb25maXJtQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcblx0Y29uZmlybUJ1dHRvbi50eXBlID0gXCJidXR0b25cIjtcblx0Y29uZmlybUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2V0IFNpemVcIjtcblx0Y29uZmlybUJ1dHRvbi5zdHlsZS5mb250U2l6ZSA9IFwiOHB4XCI7XG5cdGNvbmZpcm1CdXR0b24uc3R5bGUucGFkZGluZyA9IFwiMCA0cHhcIjtcblx0Ly8gSGlkZSB0aGVzZSB1bmxlc3MgXCJjdXN0b21cIiBpcyBzZWxlY3RlZFxuXHRoZWlnaHRJbnB1dC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cdHdpZHRoSW5wdXQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXHRjb25maXJtQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblx0dG9wQmFyLmFwcGVuZENoaWxkKGhlaWdodElucHV0KTtcblx0dG9wQmFyLmFwcGVuZENoaWxkKHdpZHRoSW5wdXQpO1xuXHR0b3BCYXIuYXBwZW5kQ2hpbGQoY29uZmlybUJ1dHRvbik7XG5cblx0ZnVuY3Rpb24gdXBkYXRlQ3VzdG9tRmllbGRzKCkge1xuXHRcdGlmIChzaXplU2VsZWN0b3IudmFsdWUgPT09IFwiY3VzdG9tXCIpIHtcblx0XHRcdGhlaWdodElucHV0LnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0d2lkdGhJbnB1dC5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdGNvbmZpcm1CdXR0b24uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGhlaWdodElucHV0LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblx0XHRcdHdpZHRoSW5wdXQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXHRcdFx0Y29uZmlybUJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cdFx0fVxuXHR9XG5cdHNpemVTZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsICgpID0+IHtcblx0XHRpZiAob3B0cy5vblNpemVDaGFuZ2UpIHtcblx0XHRcdGlmIChzaXplU2VsZWN0b3IudmFsdWUgPT09IFwiZmlsbFwiKSB7XG5cdFx0XHRcdG9wdHMub25TaXplQ2hhbmdlKDAsIDAsIFwiZmlsbFwiKTtcblx0XHRcdH0gZWxzZSBpZiAoc2l6ZVNlbGVjdG9yLnZhbHVlID09PSBcImRlZmF1bHRcIikge1xuXHRcdFx0XHRvcHRzLm9uU2l6ZUNoYW5nZSgwLCAwLCBcImRlZmF1bHRcIik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHVwZGF0ZUN1c3RvbUZpZWxkcygpO1xuXHR9KTtcblx0dXBkYXRlQ3VzdG9tRmllbGRzKCk7XG5cblx0Y29uZmlybUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRjb25zdCBoZWlnaHQgPSBwYXJzZUludChoZWlnaHRJbnB1dC52YWx1ZSk7XG5cdFx0Y29uc3Qgd2lkdGggPSBwYXJzZUludCh3aWR0aElucHV0LnZhbHVlKTtcblx0XHRpZiAoIWlzTmFOKGhlaWdodCkgJiYgaGVpZ2h0ID4gMCAmJiAhaXNOYU4od2lkdGgpICYmIHdpZHRoID4gMCkge1xuXHRcdFx0aWYgKG9wdHMub25TaXplQ2hhbmdlKSBvcHRzLm9uU2l6ZUNoYW5nZShoZWlnaHQsIHdpZHRoLCBcImN1c3RvbVwiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YWxlcnQoXCJJbnZhbGlkIGlucHV0LCBwbGVhc2UgZW50ZXIgcG9zaXRpdmUgbnVtYmVycyBmb3IgaGVpZ2h0IGFuZCB3aWR0aC5cIik7XG5cdFx0fVxuXHR9KTtcblxuXHRpZiAob3B0cy5lbmFibGVDb2xvciAhPT0gZmFsc2UpIHtcblx0XHRjb25zdCBjb2xvckJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG5cdFx0Y29sb3JCdG4udHlwZSA9IFwiYnV0dG9uXCI7XG5cdFx0Y29sb3JCdG4udGV4dENvbnRlbnQgPSBcIkNvbG9yIFx1RDgzQ1x1REZBOFwiO1xuXHRcdGNvbG9yQnRuLnN0eWxlLmZvbnRTaXplID0gXCI4cHhcIjtcblx0XHRjb2xvckJ0bi5zdHlsZS5wYWRkaW5nID0gXCIwIDRweFwiO1xuXHRcdHRvcEJhci5hcHBlbmRDaGlsZChjb2xvckJ0bik7XG5cdFx0Y29sb3JCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHRpZiAoIW9wdHMuZ2V0U2VsZWN0ZWQpIHJldHVybjtcblx0XHRcdGNvbnN0IHsgc2VsZWN0ZWRDYXJkLCBzZWxlY3RlZENhcmRMYWJlbCB9ID0gb3B0cy5nZXRTZWxlY3RlZCgpO1xuXHRcdFx0aWYgKCFzZWxlY3RlZENhcmQgfHwgIXNlbGVjdGVkQ2FyZExhYmVsKSByZXR1cm47XG5cdFx0XHRsZXQgcG9wdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0cG9wdXAuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0XHRwb3B1cC5zdHlsZS56SW5kZXggPSBcIjk5OTlcIjtcblx0XHRcdHBvcHVwLnN0eWxlLmJhY2tncm91bmQgPSBcIiNmZmZcIjtcblx0XHRcdHBvcHVwLnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkICNjY2NcIjtcblx0XHRcdHBvcHVwLnN0eWxlLmJvcmRlclJhZGl1cyA9IFwiOHB4XCI7XG5cdFx0XHRwb3B1cC5zdHlsZS5wYWRkaW5nID0gXCI4cHhcIjtcblx0XHRcdHBvcHVwLnN0eWxlLmJveFNoYWRvdyA9IFwiMCAycHggMTJweCByZ2JhKDAsMCwwLDAuMTUpXCI7XG5cdFx0XHRwb3B1cC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG5cdFx0XHRwb3B1cC5zdHlsZS5nYXAgPSBcIjhweFwiO1xuXHRcdFx0cG9wdXAuc3R5bGUudG9wID0gKHRvcEJhci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gKyB3aW5kb3cuc2Nyb2xsWSArIDQpICsgXCJweFwiO1xuXHRcdFx0cG9wdXAuc3R5bGUubGVmdCA9IChjb2xvckJ0bi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0ICsgd2luZG93LnNjcm9sbFgpICsgXCJweFwiO1xuXHRcdFx0Y29uc3QgY29sb3JzID0gb3B0cy5wYXN0ZWxDb2xvcnMgfHwgcGFzdGVsQ29sb3JzO1xuXHRcdFx0Zm9yIChjb25zdCBjb2xvciBvZiBjb2xvcnMpIHtcblx0XHRcdFx0bGV0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG5cdFx0XHRcdGJ0bi5zdHlsZS5iYWNrZ3JvdW5kID0gY29sb3I7XG5cdFx0XHRcdGJ0bi5zdHlsZS53aWR0aCA9IFwiMjRweFwiO1xuXHRcdFx0XHRidG4uc3R5bGUuaGVpZ2h0ID0gXCIyNHB4XCI7XG5cdFx0XHRcdGJ0bi5zdHlsZS5ib3JkZXIgPSBcIjFweCBzb2xpZCAjY2NjXCI7XG5cdFx0XHRcdGJ0bi5zdHlsZS5ib3JkZXJSYWRpdXMgPSBcIjUwJVwiO1xuXHRcdFx0XHRidG4uc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG5cdFx0XHRcdGJ0bi50aXRsZSA9IGNvbG9yO1xuXHRcdFx0XHRidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcblx0XHRcdFx0XHRpZiAob3B0cy5vbkNvbG9yQ2hhbmdlKSBvcHRzLm9uQ29sb3JDaGFuZ2UoY29sb3IpO1xuXHRcdFx0XHRcdHBvcHVwLnJlbW92ZSgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0cG9wdXAuYXBwZW5kQ2hpbGQoYnRuKTtcblx0XHRcdH1cblx0XHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocG9wdXApO1xuXHRcdFx0ZnVuY3Rpb24gY2xlYW51cChldjogTW91c2VFdmVudCkge1xuXHRcdFx0XHRpZiAoIXBvcHVwLmNvbnRhaW5zKGV2LnRhcmdldCBhcyBOb2RlKSkge1xuXHRcdFx0XHRcdHBvcHVwLnJlbW92ZSgpO1xuXHRcdFx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGNsZWFudXApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGNsZWFudXApLCAxMCk7XG5cdFx0fSk7XG5cdH1cblx0aWYgKG9wdHMuZW5hYmxlU2NhbGUgIT09IGZhbHNlKSB7XG5cdFx0Y29uc3Qgc2NhbGVQbHVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcblx0XHRzY2FsZVBsdXMudHlwZSA9IFwiYnV0dG9uXCI7XG5cdFx0c2NhbGVQbHVzLnRleHRDb250ZW50ID0gXCIrXCI7XG5cdFx0c2NhbGVQbHVzLnN0eWxlLmZvbnRTaXplID0gXCI4cHhcIjtcblx0XHRzY2FsZVBsdXMuc3R5bGUucGFkZGluZyA9IFwiMCA0cHhcIjtcblx0XHRjb25zdCBzY2FsZU1pbnVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcblx0XHRzY2FsZU1pbnVzLnR5cGUgPSBcImJ1dHRvblwiO1xuXHRcdHNjYWxlTWludXMudGV4dENvbnRlbnQgPSBcIi1cIjtcblx0XHRzY2FsZU1pbnVzLnN0eWxlLmZvbnRTaXplID0gXCI4cHhcIjtcblx0XHRzY2FsZU1pbnVzLnN0eWxlLnBhZGRpbmcgPSBcIjAgNHB4XCI7XG5cdFx0dG9wQmFyLmFwcGVuZENoaWxkKHNjYWxlUGx1cyk7XG5cdFx0dG9wQmFyLmFwcGVuZENoaWxkKHNjYWxlTWludXMpO1xuXHRcdHNjYWxlUGx1cy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gb3B0cy5vblNjYWxlQ2hhbmdlICYmIG9wdHMub25TY2FsZUNoYW5nZSgwLjEpKTtcblx0XHRzY2FsZU1pbnVzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiBvcHRzLm9uU2NhbGVDaGFuZ2UgJiYgb3B0cy5vblNjYWxlQ2hhbmdlKC0wLjEpKTtcblx0fVxuXHRpZiAob3B0cy5lbmFibGVGb2N1cyAhPT0gZmFsc2UpIHtcblx0XHRjb25zdCBmb2N1c0J0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG5cdFx0Zm9jdXNCdG4udHlwZSA9IFwiYnV0dG9uXCI7XG5cdFx0Zm9jdXNCdG4udGV4dENvbnRlbnQgPSBcIkZvY3VzXCI7XG5cdFx0Zm9jdXNCdG4uc3R5bGUuZm9udFNpemUgPSBcIjhweFwiO1xuXHRcdGZvY3VzQnRuLnN0eWxlLnBhZGRpbmcgPSBcIjAgNHB4XCI7XG5cdFx0dG9wQmFyLmFwcGVuZENoaWxkKGZvY3VzQnRuKTtcblx0XHRmb2N1c0J0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gb3B0cy5vbkZvY3VzICYmIG9wdHMub25Gb2N1cygpKTtcblx0fVxuXHQvLyAtLS0gRGVsZXRlIGJ1dHRvbiAtLS1cblx0Y29uc3QgZGVsZXRlQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcblx0ZGVsZXRlQnRuLnR5cGUgPSBcImJ1dHRvblwiO1xuXHRkZWxldGVCdG4udGV4dENvbnRlbnQgPSBcIlx1RDgzRFx1REREMVx1RkUwRlwiO1xuXHRkZWxldGVCdG4uc3R5bGUuZm9udFNpemUgPSBcIjhweFwiO1xuXHRkZWxldGVCdG4uc3R5bGUucGFkZGluZyA9IFwiMCA0cHhcIjtcblx0dG9wQmFyLmFwcGVuZENoaWxkKGRlbGV0ZUJ0bik7XG5cdGRlbGV0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKCkgPT4ge1xuXHRcdGlmIChvcHRzLmdldFNlbGVjdGVkKSB7XG5cdFx0XHRjb25zdCB7IHNlbGVjdGVkQ2FyZCwgc2VsZWN0ZWRDYXJkTGFiZWwsIHNlbGVjdGVkQ2FyZExpbmUgfSA9IG9wdHMuZ2V0U2VsZWN0ZWQoKTtcblx0XHRcdGlmIChzZWxlY3RlZENhcmQgJiYgc2VsZWN0ZWRDYXJkTGFiZWwgIT0gbnVsbCAmJiBzZWxlY3RlZENhcmRMaW5lICE9IG51bGwpIHtcblx0XHRcdFx0c2VsZWN0ZWRDYXJkLnJlbW92ZSgpO1xuXHRcdFx0XHRjb25zdCBmaWxlID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0XHRcdGlmIChmaWxlKSB7XG5cdFx0XHRcdFx0Y29uc3QgY29udGVudCA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGZpbGUpO1xuXHRcdFx0XHRcdGNvbnN0IGxpbmVzID0gY29udGVudC5zcGxpdChcIlxcblwiKTtcblx0XHRcdFx0XHRsaW5lcy5zcGxpY2Uoc2VsZWN0ZWRDYXJkTGluZSwgMSk7XG5cdFx0XHRcdFx0YXdhaXQgYXBwLnZhdWx0Lm1vZGlmeShmaWxlLCBsaW5lcy5qb2luKFwiXFxuXCIpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIHRvcEJhcjtcbn1cblxuZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cmluZzogc3RyaW5nKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxc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QU87QUFDL0IsVUFBTSxZQUFZLFNBQVMsY0FBYyxRQUFRO0FBQ2pELGNBQVUsT0FBTztBQUNqQixjQUFVLGNBQWM7QUFDeEIsY0FBVSxNQUFNLFdBQVc7QUFDM0IsY0FBVSxNQUFNLFVBQVU7QUFDMUIsVUFBTSxhQUFhLFNBQVMsY0FBYyxRQUFRO0FBQ2xELGVBQVcsT0FBTztBQUNsQixlQUFXLGNBQWM7QUFDekIsZUFBVyxNQUFNLFdBQVc7QUFDNUIsZUFBVyxNQUFNLFVBQVU7QUFDM0IsV0FBTyxZQUFZLFNBQVM7QUFDNUIsV0FBTyxZQUFZLFVBQVU7QUFDN0IsY0FBVSxpQkFBaUIsU0FBUyxNQUFNLEtBQUssaUJBQWlCLEtBQUssY0FBYyxHQUFHLENBQUM7QUFDdkYsZUFBVyxpQkFBaUIsU0FBUyxNQUFNLEtBQUssaUJBQWlCLEtBQUssY0FBYyxJQUFJLENBQUM7QUFBQSxFQUMxRjtBQUNBLE1BQUksS0FBSyxnQkFBZ0IsT0FBTztBQUMvQixVQUFNLFdBQVcsU0FBUyxjQUFjLFFBQVE7QUFDaEQsYUFBUyxPQUFPO0FBQ2hCLGFBQVMsY0FBYztBQUN2QixhQUFTLE1BQU0sV0FBVztBQUMxQixhQUFTLE1BQU0sVUFBVTtBQUN6QixXQUFPLFlBQVksUUFBUTtBQUMzQixhQUFTLGlCQUFpQixTQUFTLE1BQU0sS0FBSyxXQUFXLEtBQUssUUFBUSxDQUFDO0FBQUEsRUFDeEU7QUFFQSxRQUFNLFlBQVksU0FBUyxjQUFjLFFBQVE7QUFDakQsWUFBVSxPQUFPO0FBQ2pCLFlBQVUsY0FBYztBQUN4QixZQUFVLE1BQU0sV0FBVztBQUMzQixZQUFVLE1BQU0sVUFBVTtBQUMxQixTQUFPLFlBQVksU0FBUztBQUM1QixZQUFVLGlCQUFpQixTQUFTLFlBQVk7QUFDL0MsUUFBSSxLQUFLLGFBQWE7QUFDckIsWUFBTSxFQUFFLGNBQWMsbUJBQW1CLGlCQUFpQixJQUFJLEtBQUssWUFBWTtBQUMvRSxVQUFJLGdCQUFnQixxQkFBcUIsUUFBUSxvQkFBb0IsTUFBTTtBQUMxRSxxQkFBYSxPQUFPO0FBQ3BCLGNBQU1DLFFBQU8sSUFBSSxVQUFVLGNBQWM7QUFDekMsWUFBSUEsT0FBTTtBQUNULGdCQUFNLFVBQVUsTUFBTSxJQUFJLE1BQU0sS0FBS0EsS0FBSTtBQUN6QyxnQkFBTSxRQUFRLFFBQVEsTUFBTSxJQUFJO0FBQ2hDLGdCQUFNLE9BQU8sa0JBQWtCLENBQUM7QUFDaEMsZ0JBQU0sSUFBSSxNQUFNLE9BQU9BLE9BQU0sTUFBTSxLQUFLLElBQUksQ0FBQztBQUFBLFFBQzlDO0FBQUEsTUFDRDtBQUFBLElBQ0Q7QUFBQSxFQUNELENBQUM7QUFFRCxTQUFPO0FBQ1I7QUFFQSxTQUFTLGFBQWEsUUFBZ0I7QUFDckMsU0FBTyxPQUFPLFFBQVEsdUJBQXVCLE1BQU07QUFDcEQ7IiwKICAibmFtZXMiOiBbIl9hIiwgImZpbGUiXQp9Cg==
